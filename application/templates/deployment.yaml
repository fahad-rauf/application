{{- if .Values.deployment }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
{{ include "application.labels.stakater" . | indent 4 }}
{{ include "application.labels.chart" . | indent 4 }}
{{- if .Values.deployment.additionalLabels }}
{{ toYaml .Values.deployment.additionalLabels | indent 4 }}
{{- end }}
{{- if or .Values.deployment.annotations .Values.deployment.reloadOnChange }}
  annotations:
{{- end }}
{{- if .Values.deployment.annotations }}
{{ toYaml .Values.deployment.annotations | indent 4 }}
{{- end }}
{{- if .Values.deployment.reloadOnChange }} 
    reloader.stakater.com/auto: "true"
{{- end }}
  name: {{ template "application.name" . }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
{{ include "application.labels.stakater" . | indent 6 }}
{{ include "application.labels.chart" . | indent 6 }}
{{- if .Values.deployment.additionalLabels }}
{{ toYaml .Values.deployment.additionalLabels | indent 6 }}
{{- end }}
  {{- if .Values.deployment.strategy }}
  strategy:
{{ toYaml .Values.deployment.strategy | indent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
{{ include "application.labels.stakater" . | indent 8 }}
{{ include "application.labels.chart" . | indent 8 }}
{{- if .Values.deployment.podLabels }}
{{ toYaml .Values.deployment.podLabels | indent 8 }}
{{- end }}
{{- if or .Values.deployment.additionalPodAnnotations .Values.deployment.fluentdConfigAnnotations }}
      annotations:
{{- end }}
{{- with .Values.deployment.additionalPodAnnotations }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- if .Values.deployment.fluentdConfigAnnotations }}
        fluentdConfiguration: >
          [
            {
              "containers":
              [
                {
                  "expressionFirstLine": "{{ .Values.deployment.fluentdConfigAnnotations.regexFirstLine }}",
                  "expression": "{{ .Values.deployment.fluentdConfigAnnotations.regex }}",
                  "timeFormat": "{{ .Values.deployment.fluentdConfigAnnotations.timeFormat }}",
                  "containerName": "{{ template "application.name" . }}"
                }
              ]{{- with .Values.deployment.fluentdConfigAnnotations.notifications }},
              "notifications": {
                {{- with .slack }}
                "slack": {
                  "webhookURL": "{{ .webhookURL }}",
                  "channelName": "{{ .channelName }}"
                }
                {{- end }}
              }
              {{- end }}
            }
          ]
{{- end }}
    spec:
      {{- if .Values.deployment.initContainers }}
      initContainers:      
{{ toYaml .Values.deployment.initContainers | indent 6 }}
      {{- end }}
      {{- if .Values.deployment.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.deployment.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.deployment.tolerations }}
      tolerations:
{{ toYaml .Values.deployment.tolerations | indent 8 -}}
      {{- end }}
      {{- if .Values.deployment.imagePullSecrets }}      
      imagePullSecrets:
      - name: {{ .Values.deployment.imagePullSecrets }}
      {{- end }}
      containers:
      - name: {{ template "application.name" . }}
        image: "{{ .Values.deployment.image.repository }}:{{ .Values.deployment.image.tag }}"
        imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
        {{- if .Values.deployment.env }}
        env:
{{ toYaml .Values.deployment.env | indent 10 }}
        {{- end }}          
        livenessProbe:
          failureThreshold: {{ .Values.deployment.probes.livenessProbe.failureThreshold }}
          periodSeconds: {{ .Values.deployment.probes.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.deployment.probes.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.deployment.probes.livenessProbe.timeoutSeconds }}
          initialDelaySeconds: {{ .Values.deployment.probes.livenessProbe.initialDelaySeconds }}
          httpGet:
            path: {{ .Values.deployment.probes.livenessProbe.httpGet.path }}
            port: {{ .Values.deployment.probes.livenessProbe.httpGet.port }}
        readinessProbe:
          failureThreshold: {{ .Values.deployment.probes.readinessProbe.failureThreshold }}
          periodSeconds: {{ .Values.deployment.probes.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.deployment.probes.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.deployment.probes.readinessProbe.timeoutSeconds }}
          initialDelaySeconds: {{ .Values.deployment.probes.readinessProbe.initialDelaySeconds }}
          httpGet:
            path: {{ .Values.deployment.probes.readinessProbe.httpGet.path }}
            port: {{ .Values.deployment.probes.readinessProbe.httpGet.port }}
        {{- if .Values.deployment.volumeMounts }}
        volumeMounts:
{{ toYaml .Values.deployment.volumeMounts | indent 10 }}
        {{- end }}
        resources:
          limits:
            memory: {{ .Values.deployment.resources.limits.memory }}
            cpu: {{ .Values.deployment.resources.limits.cpu }}
          requests:
            memory: {{ .Values.deployment.resources.requests.memory }}
            cpu: {{ .Values.deployment.resources.requests.cpu }}
        {{- if .Values.deployment.additionalContainers }}
{{ toYaml .Values.deployment.additionalContainers | indent 6 }}
        {{- end }}
        {{- if .Values.deployment.securityContext.enabled }}
      securityContext:      
        fsGroup: {{ .Values.deployment.securityContext.fsGroup }}   
          {{- end }}
      {{- if .Values.deployment.volumes }}
      volumes:
{{ toYaml .Values.deployment.volumes | indent 8 }}
        {{- end }}  
      {{- if .Values.rbac.serviceAccount.name }}
      serviceAccountName: {{ .Values.rbac.serviceAccount.name }}
        {{- else }}
      serviceAccountName: {{ template "application.name" . }}
      {{- end }}
{{- end }}        